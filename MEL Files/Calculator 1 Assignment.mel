//Need help on Median and Mode still
global proc float Add(float $numbers[])
{
  float $sum = 0; 
  
  for($i=0; $i<size($numbers); $i++)
  {
      $sum += $numbers[$i];
      
  }
     
  return $sum;  
}
 

Add({2,5});
 
 

global proc float Subtract(float $numbers[])//Got it working. It was just a syntax error. Ha! I'm so smart. :P
{
  float $difference = $numbers[0]; 
  
  for($i=1; $i<size($numbers); $i++)
  {
      $difference -= $numbers[$i];
      
  }
     
  return $difference;  
}

  

Subtract({3,2});




global proc float Multiply(float $numbers[])
{
  float $product = 1; 
  
  for($i=0; $i<size($numbers); $i++)
  {
      $product *= $numbers[$i];
      
  }
     
  return $product;  
}

Multiply({2,5});


global proc float Divide(float $numbers[])
{
  float $quotant = $numbers[0]; 
  
  for($i=1; $i<size($numbers); $i++)
  {
      $quotant /= $numbers[$i];
      
  }
     
  return $quotant;  
}

Divide({10,5});



global proc float Powers(float $numbers[])//I did it! Ha!
{                                                            //<-- that bracket was missing
  float $power = $numbers[1]; 
  
  for($i=1; $i<size($numbers); $i++)
  {
     $power = `pow $numbers[0] $numbers[1]`;
      
  }
    
    return `pow $numbers[0] $numbers[1]`;

}

Powers({3,2});


global proc float Mean(float $numbers[])
{
  float $average = $numbers[0]; 
  
  for($i=1; $i<size($numbers); $i++)
  {
      $average += $numbers[$i];
      
  }
    
 
      $average /= $i;                       
     
 
 return $average;
}

Mean({10,5,3,4}); 


global proc float Median(float $numbers[])
{
    float $middle = 0;
    int $highindex;
    int $lowindex;
    int $index; 
    
    $numbers = sort ($numbers);
  
    int $size = size($numbers); 
    
    if($size % 2 == 0)
    {
      int $highindex = ($size/2);
      int $lowindex = ($highindex -1);
      $middle = $numbers[$highindex + $lowindex] /2;  
    }
        
    
    else
    {
     int $index = ($size - 1) /2;
     $middle = $numbers[$index];
    }
    
    return $middle; 
}

Median({1,10,4,-12,2}); 
   
    

     

global proc float Mode(float $numbers[])
{
    float $mode;
    int $index;
    float $value[];
    int $frequency[];
   
    
    
    for($i=0; $i<size($numbers); $i++)// I changed the $i<size($numbers) because it had a > instead of the < so the loop wasn't running because $i wouldn't be greater than the size of the array and still have values to check
    {
       if(floatArrayContains($numbers[$i], $value) == 0)
       {
         $value[size($value)] = $numbers[$i];// I changed the $value[size($numbers)] to $value[size($value)] because it would be placing the $numbers[$i] at the same index since the size of $numbers would never change
         $frequency[size($frequency)] = 1;  
       }
       
       else
       {
         int $index = floatArrayFind($numbers[$i],0, $value);
         
         $frequency[$index] = $frequency[$index] + 1; 
         
        }
         
        
     }
     
     print("numbers:\n");// I added these to make sure that $numbers was recieving the input properly
     print(floatArrayToString($numbers, ", "));
     print("\nvalue:\n");
     print(floatArrayToString($value, ", "));
     print("\nfrequency:\n");
     print(intArrayToString($frequency, ", "));
      
       int $maxvalue = 0;
       int $modeIndex; // I also delcared the $modeIndex here because it was having an issue assigning the intArrayFind($maxvalue,0,$frequency) in the same line
       for($i=0; $i<size($frequency); $i++) // I changed the > to < it was the same thing as the other for loop
       {
          if($frequency[$i] > $maxvalue)
         {
            $maxvalue = $frequency[$i];
         }  
          
         $modeIndex = intArrayFind($maxvalue,0,$frequency);
     
         $mode = $value[$modeIndex]; 
       }
    
             
    
    
    
    
    
   return $mode;  
}
Mode({1,10,10,-10,5,6,1,1,9,9,9,9}); 

/*
So the file you sent me there was a missing bracket on line 74
on line 153 I changed the $i<size($numbers) because it had a > instead of the < so the loop wasn't running because $i wouldn't be greater than the size of the array and still have values to check and place in the values and frequency arrays
on line 157 I changed the $value[size($numbers)] to $value[size($value)] because it would be placing the $numbers[$i] at the same index since the size of $numbers would never change
on 172 and 173 I added prints to make sure that $numbers was recieving the input properly
on 180 I delcared the $modeIndex because it was having an issue assigning the intArrayFind($maxvalue,0,$frequency) to it and declaring at the same time on line 188
on line 181 I changed the > to < it was the same thing as the other for loop
*/